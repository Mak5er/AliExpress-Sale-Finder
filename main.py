import reimport sqlite3import threadingimport timeimport telebotfrom selenium import webdriverfrom selenium.webdriver import ActionChainsfrom selenium.webdriver.chrome.service import Servicefrom selenium.webdriver.common.by import Byfrom telebot import typesfrom telebot.apihelper import ApiTelegramExceptionfrom telebot.types import InlineKeyboardMarkup, InlineKeyboardButtonimport configdef create_connection():    conn = sqlite3.connect('alik.db', check_same_thread=False)    cursor = conn.cursor()    cursor.execute('''CREATE TABLE IF NOT EXISTS sent_items                          (item_id integer, user_id text)''')    cursor.execute('''CREATE TABLE IF NOT EXISTS items                      (id INTEGER PRIMARY KEY AUTOINCREMENT,                       price TEXT NOT NULL,                       url TEXT NOT NULL,                       title TEXT NOT NULL,                       src TEXT NOT NULL)''')    cursor.execute('''CREATE TABLE IF NOT EXISTS spam_id                         (id INTEGER PRIMARY KEY AUTOINCREMENT,                          title TEXT NOT NULL)''')    cursor.execute('''CREATE TABLE IF NOT EXISTS users                        (user_id INTEGER PRIMARY KEY AUTOINCREMENT,                            username TEXT NOT NULL)''')    conn.commit()    return conn, cursorcreate_connection()conn = sqlite3.connect('alik.db', check_same_thread=False)cursor = conn.cursor()allowed_id = 6013011895allowed_username = config.USERNAMEbot = telebot.TeleBot(config.TOKEN)spam_tokens = (    "^[_a-zA-Z0-9]+$",  # one word is suspected to be spam    "^\d+\.\d+$",  # only number is suspected to be spam    "^fee", "fee$", "(fee|Fee)",    "^link", "link$", " (link|Link) ", "link\W", "\Wlink",    "^reissue", "reissue$", " (reissue|Reissue) ", "reissue\W", "\Wreissue",    "^links", "links$", " (links|Links) ",    "reissue (order|item|product)", "do not order",    "shipping", "No Items", "payment", "^LOGO FREE$", "For replacement only", "Resend Only",    "(postage|pay|price|cost|Make Up The) difference", "As Warranty", "Dont Order", "^supplementary postage$",    "^Freight$", "Extra Cost", "do not ship", "^VIP1", "will not be shipped", "Do Not Order", "cost as talk",    "Other Sevice", "^Special product cost$", "contact customer service", "This is not a product",    "Resend Package", "Resend order", "ship again for broken item", "Supplementary order", "good service for custromer",    "do not place an order", "Resent The Package", "^reissue$", "Supplementary Expenses", "Parts are reissued.",    "Freight charges", "^special price for customer$", "do not buy", "diff√©rence de prix",    "Resend Order Freight", "Only for additional transportation", "Replenishment order", "For Start a special parcel",    "After-sale service", "^no product", "Supplement the spread", "Donlis Make Up Freight", "Extra dollars",    "Express reissue", "Product Reissue", "Hello friend Your order", "Fill the freight",    "Custom Your Own Photo Print on Canvas", "^Special \d+$", "Send the goods again", "Pago adicional en tu pedido",    "^for Resend$", "^for sending$", "Address modification", "Logistics tracking number", "reissuing",    "Differential Pay", "reissue[d]? (products|goods)", "special order", "^Custom Made$", "parts reissue",    "The tempered film is broken", "^Trasporto aggiunto$", "^Supplement Only$", "freight difference",    "Special cost just for your order", "Make up the postage", "action figure client", "sending or resending",    "resend Accessories", "after-sales", "not a real product", "special cost just for", "For order",    'resend Accessories', "Additional Pay on Your Order", "Additional Pay on Order", "Additional Pay", "1$ accessories",    "damage", "2023-04-17: 2*VLF060-5-14-50-70+2*VLF060-10-14-50-70", "CAR WASH GUN SERVICE",    "wrong delivery", "special Redelivery", "Delivery cost", "Cover the difference", "Shipping Cost",    "Contact with seller", "Resend", "wrong delivery", "Making Up Difference", "Exclusive Customer Links"                                                                               "please contact our customer service before placing an order",    "after sold service", "Dial customization cost"                          "Projection fittings", "Please contact with Customer Service before Paying.",    "Difference Of Price"    "Replenish", "re-shipped", "One yuan postage", "Postage retakes", "don‚Äôt take random shots", "Customized For You",    "Don't buy!!", "Only Use for Shipping Cost", "re-sent", "Custom Keys GAC", "Postage allowance"                                                                               "There is a demand for detailed and timely communication",    "Drive board /drive plate", "price different"                                "supplementary price", "trade difference", "Afte-S", "Logistics is special",    "replacement watch part",    "Extra use for customers", "Balance Difference", "Extra Money", "customized product ",    "customized products please consult when placing an order", "Diamond Mini Blocks Bricks Replacement",    "Five Year Warranty For Mobile Phone Lcd Touch Screen Display Replacement", "make up $0.1",    "Thank you for your support",)spam_filter = r'|'.join(spam_tokens)spam_re = re.compile(    f'({spam_filter})', re.IGNORECASE)price_re = re.compile(r'–≥—Ä–Ω.(\d[ ,.0-9]+)')item_id_re = re.compile(r'item/(\d+).html')@bot.message_handler(commands=['start'])def send_welcome(message):    try:        user_id = message.from_user.id        username = message.chat.username        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)        all_items = types.KeyboardButton(text='–í—Å—ñ —Ç–æ–≤–∞—Ä–∏')        unviewed_items = types.KeyboardButton(text='üÜï–ù–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏')        keyboard.add(all_items, unviewed_items)        bot.send_message(chat_id=message.chat.id, text='–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–µ—à–µ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑ AliExpress!',                         reply_markup=keyboard)        conn, cursor = create_connection()        cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)",                       (user_id, username))        conn.commit()        cursor.close()        conn.close()    except ApiTelegramException as e:        if e.error_code == 403:            print("User has blocked the bot!")        else:            print("Error sending message:", e)@bot.message_handler(func=lambda message: message.text == 'üÜï–ù–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏')def send_unviewed_items(call):    chat_id = call.chat.id    user_id = call.from_user.id    conn, cursor = create_connection()    cursor.execute(        "SELECT id, price, url, title, src FROM items WHERE id NOT IN (SELECT item_id FROM sent_items WHERE user_id = ?)",        (user_id,))    result = cursor.fetchall()    if not result:        bot.send_message(chat_id, '–ù–∞ –∂–∞–ª—å, –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –≤–∂–µ –±—É–ª–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ.')    else:        for item in result:            id, price, url, title, src = item            text = f"{price} –≥—Ä–Ω. | {title} | {url} | {id}"            bot.send_photo(chat_id, src, caption=text)            cursor.execute("INSERT INTO sent_items (item_id, user_id) VALUES (?, ?)",                           (id, user_id))            conn.commit()        cursor.close()        conn.close()@bot.message_handler(func=lambda message: message.text == '–í—Å—ñ —Ç–æ–≤–∞—Ä–∏')def send_all_items(call):    chat_id = call.chat.id    conn, cursor = create_connection()    cursor.execute("SELECT id, price, url, title, src FROM items")    items = cursor.fetchall()    if not items:        bot.send_message(chat_id, '–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É.')    else:        for item in items:            id, price, url, title, src = item            text = f"{price} –≥—Ä–Ω. | {title} | {url} | {id}"            bot.send_photo(chat_id, src, caption=text)        conn.close()@bot.message_handler(commands=['info'])def info(message):    conn, cursor = create_connection()    cursor.execute("SELECT COUNT(DISTINCT user_id) FROM users")    user_count = cursor.fetchone()[0]    cursor.execute("SELECT COUNT(*) FROM items")    items_count = cursor.fetchone()[0]    username = message.chat.username    bot.reply_to(message, f"""–ü—Ä–∏–≤—ñ—Ç @{username}! –Ø –±–æ—Ç –≤ —è–∫–æ–º—É —Ç–∏ –º–æ–∂–µ—à –∑–Ω–∞–π—Ç–∏ —Ü—ñ–∫–∞–≤—ñ, –∞ –≥–æ–ª–æ–≤–Ω–µ –¥–µ—à–µ–≤—ñ —Ç–æ–≤–∞—Ä–∏ –∑ AliExpress.–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:ü™™–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–æ—Ç–∞: {user_count}üìÅ–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –±–∞–∑—ñ: {items_count}–ë–æ—Ç –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑—Ä–æ–±–∫–∏ —Ç–æ–º—É –º–æ–∂–ª–∏–≤—ñ –±–∞–≥–∏ —ñ –Ω–µ–ø–æ–ª–∞–¥–∫–∏!–î–ª—è —Å–∫–∞—Ä–≥ —ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –ø–∏—Å–∞—Ç–∏ - @mak5er""")@bot.message_handler(commands=['admin'])def admin(message):    user_id = message.from_user.id    username = message.from_user.username    if user_id == allowed_id and username == allowed_username:        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏        keyboard = InlineKeyboardMarkup()        add_item = InlineKeyboardButton(text='üÜï–ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä', callback_data='add_item')        add_trash_item = InlineKeyboardButton(text='üì©–°–ø–∞–º IDüõë', callback_data='add_trash_item')        not_trash_item = InlineKeyboardButton(text='üì¨–ù–µ —Å–ø–∞–º', callback_data='not_trash_item')        delete_item = InlineKeyboardButton(text='‚úÇ–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä', callback_data='delete_item')        delete_all_items = InlineKeyboardButton(text='‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å–µ‚Äº', callback_data='delete_all_items')        send_to_all = InlineKeyboardButton(text='üì®–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—Å—ñ–º', callback_data='send_to_all')        category_start = InlineKeyboardButton(text='üîé–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä—ñ–πüëì', callback_data='category_start')        keyboard.row(add_item, delete_item)        keyboard.row(delete_all_items, not_trash_item)        keyboard.row(add_trash_item)        keyboard.row(send_to_all)        keyboard.row(category_start)        conn, cursor = create_connection()        cursor.execute("SELECT COUNT(DISTINCT user_id) FROM users")        user_count = cursor.fetchone()[0]        cursor.execute("SELECT COUNT(*) FROM items")        items_count = cursor.fetchone()[0]        bot.send_message(chat_id=message.chat.id, text=f'''–í—ñ—Ç–∞—é! –¶–µ –ø–∞–Ω–µ–ª—å–∫–∞ –∞–¥–º—ñ–Ω–∞!ü™™–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–æ—Ç–∞: {user_count}üìÅ–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –±–∞–∑—ñ: {items_count}''', reply_markup=keyboard)    else:        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")@bot.callback_query_handler(func=lambda call: call.data == 'add_trash_item')def add_trash_id_callback(call):    bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥—ñ—Ç—å ID —Å–ø–∞–º—É:')    bot.register_next_step_handler(call.message, add_trash_id)def add_trash_id(message):    conn, cursor = create_connection()    cursor.execute("SELECT id, title FROM items WHERE id=?", (message.text,))    row = cursor.fetchone()    if row:        cursor.execute("INSERT INTO spam_id VALUES (?, ?)", row)        conn.commit()        bot.reply_to(message, f"ID –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")        cursor.close()        conn.close()    else:        bot.reply_to(message, f"–¢–∞–∫–æ–≥–æ ID –Ω–µ —ñ—Å–Ω—É—î!")@bot.callback_query_handler(func=lambda call: call.data == 'category_start')def category_start_callback(call):    bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É:")    bot.register_next_step_handler(call.message, second_threat)def second_threat(message):    try:        max_price = float(message.text)        bot.send_message(chat_id=message.chat.id,                         text=f'''–í–∏ –≤–≤–µ–ª–∏ —Ü—ñ–Ω—É: {max_price}–≥—Ä–Ω.–ü–æ—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥... –Ø –ø–æ–≤—ñ–¥–æ–º–ª—é –≤–∞—Å –∫–æ–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è.''')        service = webdriver.chrome.service.Service("\chromedriver\chromedriver.exe")        service.start()        options = webdriver.ChromeOptions()        driver = webdriver.Chrome(options=options)        url = f"https://www.aliexpress.com/"        driver.get(url)        driver.maximize_window()        def handle_18():            try:                # Handle "I'm over 18" button                driver.find_element(By.CSS_SELECTOR, 'div[class^="law18--left"]').click()            except:                pass        def slide():            try:                # driver.switch_to.frame(driver.find_element(By.CSS_SELECTOR, ".fm-login iframe"))                slider = driver.find_element(By.CSS_SELECTOR, 'span[class^="nc_iconfont btn_slide"]')                ActionChains(driver).click_and_hold(slider).pause(1).move_by_offset(310, 0).release().perform()                driver.switch_to.default_content()                time.sleep(5)                err_slider = driver.find_element(By.CSS_SELECTOR, 'div[class^="errloading"]')                if err_slider:                    err_slider.click()                    slide()                else:                    pass            except:                pass        def go_to_category(category):            # Start with HOME page            driver.get(url)            time.sleep(2)            for el in driver.find_elements(By.CSS_SELECTOR, 'div[class="categories-list-box"] > dl > dt > span > a'):                if el.text == category["name"]:                    # Find the related category in the list and click it instead of loading by href                    el.click()                    break        def find_in_category(category):            global src, url            print(category["name"])            retries = 10            price = None            go_to_category(category)            while retries > 0:                time.sleep(1)                slide()                handle_18()                try:                    price = driver.find_element(By.CSS_SELECTOR, 'input[placeholder="Max"]')                    if not price.get_attribute('value'):                        price.send_keys(max_price)                    driver.find_element(By.CSS_SELECTOR, 'span[class^="priceInput--ok"]').click()                    time.sleep(1)                    handle_18()                    for el in driver.find_elements(By.CSS_SELECTOR, 'span[class^="featureSwitch--text"]'):                        if el.text == "Free shipping":                            el.click()                            time.sleep(1)                            break                    handle_18()                    if driver.find_elements(By.CSS_SELECTOR, 'div[class^="filterNoResult"]') or driver.find_elements(                            By.CSS_SELECTOR, 'div[class^="zeroResult--tipContainer"]'):                        raise ValueError('Trying one more time')                    break                except:                    retries -= 1                    go_to_category(category)            if driver.find_elements(By.CSS_SELECTOR, 'div[class^="filterNoResult"]') or driver.find_elements(                    By.CSS_SELECTOR,                    'div[class^="zeroResult--tipContainer"]'):                print("\t [NO RESULTS ERROR]")                return            try:                ids = driver.find_elements(By.CSS_SELECTOR, 'a[class^="manhattan--container"]')                for el in ids:                    try:                        # Sometimes there are items which don't have Free shipping                        free = el.find_element(By.CSS_SELECTOR, '[class^="manhattan--topList"]').text == 'Free shipping'                    except:                        free = False                    try:                        url = el.get_attribute("href")                        res = item_id_re.findall(url)                        id = None                        if res:                            id = res[0]                    except:                        print('ERROR >>>', url)                        import traceback                        traceback.print_exc()                        continue                    cursor.execute("SELECT * FROM spam_id WHERE id=?", (id,))                    if len(cursor.fetchall()) > 0:                        continue                    has_item = False                    cursor.execute("SELECT * FROM items WHERE id=?", (id,))                    if len(cursor.fetchall()) > 0:                        has_item = True                    prices = price_re.findall(el.text)                    if not prices:                        continue                    price_text = prices[0].replace(',', '').replace(' ', '')                    price = float(price_text)                    if price > max_price:                        continue                    try:                        title = el.find_element(By.CSS_SELECTOR, 'div[class^="manhattan--title"]').text                    except:                        title = '[SPAM] NO TITLE'                    if spam_re.findall(title):                        title = f'[SPAM] {title}'                    try:                        image = el.find_element(By.CSS_SELECTOR, 'img[class^="manhattan--img"]')                        src = image.get_attribute("src").split("_220x220")[0]                    except:                        title = f'[SPAM] {title}'                    if '[SPAM]' in title and not has_item:                        cursor.execute("INSERT INTO spam_id (id, title) VALUES (?, ?)", (id, title))                        conn.commit()                    if not free:                        title = f'[NOT FREE] {title}'                    print(f"{price} –≥—Ä–Ω.", "|", title, "|", f"https://www.aliexpress.com/item/{id}.html", '|', id)                    url = f"https://www.aliexpress.com/item/{id}.html"                    if free and '[SPAM]' not in title and not has_item:                        cursor.execute("INSERT INTO items (id, price, url, title, src) VALUES (?, ?, ?, ?, ?)",                                       (id, price, url, title, src))                        conn.commit()            except:                import traceback                traceback.print_exc()        categories = [{"name": el.text, "url": el.get_attribute('href')} for el in                      driver.find_elements(By.CSS_SELECTOR, 'div[class="categories-list-box"] > dl > dt > span > a')]        for category in categories:            find_in_category(category)        print("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")        bot.send_message(chat_id=message.chat.id, text='–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –Ω–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏!')        def my_thread():            thread = threading.Thread(target=second_threat)            thread.start()        my_thread()    except ValueError:        bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ü—ñ–Ω–∏, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")@bot.callback_query_handler(func=lambda call: call.data == 'add_item')def add_item_callback(call):    message_text = "–ß–∏ –±–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä?"    bot.send_message(chat_id=call.message.chat.id, text=message_text,                     reply_markup=get_yes_no_keyboard_add())def get_yes_no_keyboard_add():    keyboard = types.InlineKeyboardMarkup(row_width=2)    yes_button = types.InlineKeyboardButton(text="–¢–∞–∫", callback_data="yes_add")    no_button = types.InlineKeyboardButton(text="–ù—ñ", callback_data="no_add")    keyboard.add(yes_button, no_button)    return keyboard@bot.callback_query_handler(func=lambda call: call.data == 'yes_add')def yes_callback_add(call):    bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥—ñ—Ç—å ID:')    bot.register_next_step_handler(call.message, add_item_price)def add_item_price(message):    chat_id = message.chat.id    id = message.text    bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É:')    bot.register_next_step_handler(message, add_item_url, id=id)def add_item_url(message, id):    chat_id = message.chat.id    price = message.text    bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥—ñ—Ç—å URL:')    bot.register_next_step_handler(message, add_item, id=id, price=price)def add_item(message, id, price):    chat_id = message.chat.id    url = message.text    cursor.execute("INSERT INTO items (id, price, url) VALUES (?, ?, ?)", (id, price, url))    conn.commit()    bot.reply_to(message, f"–ù–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑ ID {id}, —Ü—ñ–Ω–æ—é {price} —Ç–∞ URL {url} –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")    cursor.close()    conn.close()@bot.callback_query_handler(func=lambda call: call.data == 'no_add')def no_callback_add(call):    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)    pass@bot.callback_query_handler(func=lambda call: call.data == 'delete_item')def delete_item_callback(call):    bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥—ñ—Ç—å ID –µ–ª–µ–º–µ–Ω—Ç—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:')    bot.register_next_step_handler(call.message, delete_item)def delete_item(message):    conn, cursor = create_connection()    cursor.execute("DELETE FROM items WHERE id=?", (message.text,))    conn.commit()    bot.reply_to(message, f"ID –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")    cursor.close()    conn.close()@bot.callback_query_handler(func=lambda call: call.data == 'delete_all_items')def do_relocate_callback(call):    message_text = "–ß–∏ –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥—ñ—é?"    bot.send_message(chat_id=call.message.chat.id, text=message_text,                     reply_markup=get_yes_no_keyboard())def get_yes_no_keyboard():    keyboard = types.InlineKeyboardMarkup(row_width=2)    yes_button = types.InlineKeyboardButton(text="–¢–∞–∫", callback_data="yes")    no_button = types.InlineKeyboardButton(text="–ù—ñ", callback_data="no")    keyboard.add(yes_button, no_button)    return keyboard@bot.callback_query_handler(func=lambda call: call.data == 'yes')def yes_callback(call):    conn, cursor = create_connection()    cursor.execute("DELETE FROM items")    cursor.execute("DELETE FROM sent_items")    conn.commit()    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)    bot.send_message(chat_id=call.message.chat.id, text="–í—Å–µ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")@bot.callback_query_handler(func=lambda call: call.data == 'no')def no_callback(call):    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)    pass@bot.callback_query_handler(func=lambda call: call.data == 'not_trash_item')def not_trash_item_handler(call):    bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥—ñ—Ç—å ID –µ–ª–µ–º–µ–Ω—Ç—É:')    bot.register_next_step_handler(call.message, not_trash_item)def not_trash_item(message):    conn, cursor = create_connection()    cursor.execute("DELETE FROM spam_id WHERE id=?", (message.text,))    conn.commit()    bot.reply_to(message, f"ID –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ —Å–ø–∞–º—É.")    cursor.close()    conn.close()@bot.callback_query_handler(func=lambda call: call.data == 'send_to_all')def send_to_all_callback(call):    bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:')    bot.register_next_step_handler(call.message, send_to_all_message)def send_to_all_message(message):    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö sent_jokes    conn, cursor = create_connection()    cursor.execute("SELECT DISTINCT user_id FROM users")    users = cursor.fetchall()    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ    for user in users:        chat_id = user[0]        try:            chat_member = bot.get_chat_member(chat_id=chat_id, user_id=bot.get_me().id)            if not chat_member.can_send_messages:                pass            bot.send_message(chat_id=chat_id, text=message.text)        except telebot.apihelper.ApiTelegramException as e:            print(f"–ü–æ–º–∏–ª–∫–∞: {e}")            # –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥—ñ—ó, —è–∫—ñ –º–æ–∂–Ω–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞            passbot.infinity_polling()